{"version":3,"file":"dist/js/bundle.js","mappings":"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","sources":["webpack://weather/./src/weather.js","webpack://weather/./src/geolocation.js","webpack://weather/./src/map.js","webpack://weather/./src/index.js","webpack://weather/./src/page.js"],"sourcesContent":["const weather = {\n  apiKey: \"d62132a71a9144c3594bd6a136b16dfc\",\n  baseUrl: \"https://api.openweathermap.org/\",\n\n  get(lat, lon) {\n    const url = `${this.baseUrl}data/2.5/weather?lat=${lat}&lon=${lon}&appid=${this.apiKey}`;\n\n    return fetch(url).then((response) => response.json());\n  },\n\n  findCityCoords(cityName) {\n    const url = `${this.baseUrl}geo/1.0/direct?q=${cityName}&limit=1&appid=${this.apiKey}`;\n\n    return fetch(url)\n      .then((response) => response.json())\n      .then(\n        (data) =>\n          new Promise((resolve, reject) => {\n            if (data[0]) {\n              resolve(data[0]);\n            }\n            reject(new Error(\"City was not found\"));\n          })\n      );\n  },\n\n  toCelsius(fahrenheit) {\n    return parseFloat(fahrenheit) - 273.15;\n  },\n};\n\nexport default weather;\n","const geolocation = {\n  getCurrentPosition: () =>\n    fetch(\"https://get.geojs.io/v1/ip/geo.json\").then((response) =>\n      response.json()\n    ),\n};\n\nexport default geolocation;\n","class Map {\n  apiKey = \"AIzaSyB1RMnKzcvlp3v90ei9EUIFlAn5qbFuzqc\";\n\n  baseUrl = \"https://maps.googleapis.com/maps/api/staticmap\";\n\n  // Html Container for Map\n  container;\n\n  constructor(htmlContainer) {\n    this.container = htmlContainer;\n  }\n\n  render(lat, lon) {\n    const params = {\n      key: this.apiKey,\n      size: `640x640`,\n      center: `${lat},${lon}`,\n      zoom: 10,\n      map_id: \"fa7cf5ec5edea579\",\n    };\n\n    const searchParams = new URLSearchParams(params);\n    const url = `${this.baseUrl}?${searchParams.toString()}`;\n\n    const img = document.createElement(\"img\");\n    img.src = url;\n\n    this.container.innerHTML = \"\";\n    this.container.append(img);\n  }\n}\n\nexport default Map;\n","import \"../assets/styles/reset.css\";\nimport \"../assets/styles/main.css\";\nimport weather from \"./weather\";\nimport geolocation from \"./geolocation\";\nimport Page from \"./page\";\n\nconst page = new Page(document.getElementById(\"container\"));\n\ngeolocation\n  .getCurrentPosition()\n  .then((coords) => weather.get(coords.latitude, coords.longitude))\n  .then((weatherData) => page.render(weatherData));\n","import weather from \"./weather\";\nimport Map from \"./map\";\n\nclass Page {\n  // Root HTML element, from witch we find every other elements\n  rootElement;\n\n  // Html element for displaying City Name\n  city;\n\n  // Html element for displaying temperature\n  t;\n\n  // Html form\n  form;\n\n  // Html search city input\n  input;\n\n  // Html element for rendering previous search history\n  searchHistory;\n\n  // LocalStorage object\n  storage;\n\n  map;\n\n  constructor(rootElement) {\n    this.rootElement = rootElement;\n    this.storage = window.localStorage;\n    this.map = new Map(this.rootElement.querySelector(\".map-panel\"));\n\n    this.city = this.rootElement.querySelector(\".weather-data__city\");\n    this.t = this.rootElement.querySelector(\".weather-data__temp\");\n    this.form = this.rootElement.querySelector(\".city-form\");\n    this.input = this.rootElement.querySelector(\".text-field__input\");\n    this.searchHistory = this.rootElement.querySelector(\".search-history\");\n\n    this.form.addEventListener(\"submit\", this.onSubmitSearch);\n    this.city.innerHTML =\n      \"Определяем ваше местоположение... Разрешите геолокацию\";\n    this.renderSearchHistory();\n  }\n\n  render(data) {\n    const celsius = weather.toCelsius(data.main.temp);\n    this.t.innerHTML = `${(celsius > 0 ? \"+\" : \"\") + celsius.toFixed()}°C`;\n    this.city.innerHTML = data.name;\n\n    this.renderSearchHistory();\n    this.map.render(data.coord.lat, data.coord.lon);\n  }\n\n  renderSearchHistory() {\n    this.searchHistory.innerHTML = \"\";\n\n    const history = this.getHistory();\n\n    history.forEach((city) => {\n      const btn = document.createElement(\"button\");\n      btn.className = \"tag-btn\";\n      btn.innerHTML = city;\n      btn.addEventListener(\"click\", this.onClickCity);\n\n      this.searchHistory.append(btn);\n    });\n  }\n\n  onSubmitSearch = (event) => {\n    event.preventDefault();\n    this.showCityWeather(this.input.value);\n  };\n\n  onClickCity = (event) => {\n    this.showCityWeather(event.target.innerHTML);\n  };\n\n  showCityWeather(cityName) {\n    this.lockPage();\n\n    weather\n      .findCityCoords(cityName)\n      .then((cityCoords) => weather.get(cityCoords.lat, cityCoords.lon))\n      .then((weatherData) => {\n        this.saveHistory(cityName);\n        this.render(weatherData);\n      })\n      .catch((err) => console.error(err))\n      .finally(() => this.unlockPage());\n  }\n\n  saveHistory(city) {\n    let items = this.getHistory();\n    items = items.filter((item) => item !== city);\n    items.push(city);\n    this.storage.setItem(\"history\", JSON.stringify(items));\n  }\n\n  getHistory() {\n    const history = JSON.parse(this.storage.getItem(\"history\")) || [];\n    return history.reverse();\n  }\n\n  lockPage() {\n    this.input.disabled = true;\n  }\n\n  unlockPage() {\n    this.input.disabled = false;\n    this.input.value = \"\";\n  }\n}\n\nexport default Page;\n"],"names":["apiKey","baseUrl","get","lat","lon","url","this","fetch","then","response","json","findCityCoords","cityName","data","Promise","resolve","reject","Error","toCelsius","fahrenheit","parseFloat","Map","htmlContainer","container","params","key","size","center","zoom","map_id","searchParams","URLSearchParams","toString","img","document","createElement","src","innerHTML","append","page","Page","rootElement","event","preventDefault","showCityWeather","input","value","target","storage","window","localStorage","map","querySelector","city","t","form","searchHistory","addEventListener","onSubmitSearch","renderSearchHistory","celsius","weather","main","temp","toFixed","name","render","coord","getHistory","forEach","btn","className","onClickCity","lockPage","cityCoords","weatherData","saveHistory","err","console","error","unlockPage","items","filter","item","push","setItem","JSON","stringify","parse","getItem","reverse","disabled","getElementById","geolocation","coords","latitude","longitude"],"sourceRoot":""}